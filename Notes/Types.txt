import java.awt.*;
import java.util.Arrays;

a method is a function inside a class
classes - Pascal naming
methods - camel naming

main method in project should always be static
void - method will not return a value

always surround textual data with double quotes

primitive types - 8 primitive types

byte > short(2 bytes) > int(4 bytes) > long > float > double
-byte can store values up to 127
- short up to 32k
- int up to 2B

long viewCount = 3_123_456_789L;
use L at the end of the number as java compiler assumes large numbers to be int, although they are typed differently
Same with doubles and floats. Java compiler sees float 2.99 as a double. - float 2.99F;

char letter = 'A' - single characters with '', strings with ""

Reference types are copied by their references and primitive are copied by their value
IE if you make a new instance of a class and assign it a variable (A) and you assign another variable (B)
to the initial variable (A), both variables will point to the same area of memory. So if you change a property B,
it will be represented in the output with you print A.

Strings:
Reference type that doesn't need the "new" keyword as it is used so often.
built in methods include:
.length()
.startsWith()
.indexOf()
.replace()
.toLowerCase()
.trim() - gets rid of white at the front and  back of the string
In java strings are immutable, we cannot change them. Any string method will return a new string
object.

Escape sequences:
To use "" inside a string, use backslashes. IE "Hello \"Tom\"";
To use backslashes inside a string use two - "c:\\Windows\\..." => "c:\Windows\..."
Use \n to add a new line to the string - "c:\nWindows\\..." =>
"c:
Windows\..."
Use \t to add a tab in the string

Arrays
example - initialise an array. IE What is in the array int[] numbers = new int[5]
This initialises an empty array which can hold up to 5 integers,
numbers[0] = 1;
numbers[1] = 2;
=> [1,2,0,0,0]
unused positions have a default value of 0

Multidimensional arrays
2 by 3 matrix -  2 rows and 3 columns
    int[][] numbers = new int[2][3];
        numbers[0][0] = 1; - column 1 of row 1 == 1
         System.out.println(Arrays.deepToString(numbers));
         =>[[1, 0, 0], [0, 0, 0]]
to make a 3 dimational array just add another set of brackets as specify the length

Use curly braces - get rid of the new operator:
 int[][] numbers = {{1,2,3}, {4,5,6}};
        System.out.println(Arrays.deepToString(numbers));
        }
        => [[1, 2, 3], [4, 5, 6]]

Constants
Add "final" keyword to initialize a constant EG
        final float PI = 3.14F;
        PI = 1;
        - PI will not be changed to 1
        - use CAPS to name a constant

Arithmetic Expressions
  int result = 10/3
In java, the division of 2 whole numbers is a whole number
=> 3
In order to get a floating point number we need to convert to a float or a double:
        double result = (double)10/(double)3;
        => 3.3333333333333335
+ - / % etc. are called arithmetic operators, the numbers used are called operands.

increment/decrement ++/--
       int x = 1;
        x++;
        System.out.println(x);
        => 2
++ can be a prefix or postfix
        int x = 1;
        int y = x++;
        System.out.println(x);
        =>2
        System.out.println(y);
        =>1

If the ++ is on the right of x, y will assign its self to x (x is 1) first, then x will be incremented
however,  if ++ is on the left, x will be incremented (x is 2) before it is assigned to y

        int x = 1;
        int y = ++x;
        System.out.println(x);
        =>2
        System.out.println(y);
        =>2

However:
       int x = 1;
       x = x + 1;
       // or x += 1 - augmented assignment operator
       System.out.println(x);
         => 2
         not 1
This is because the arithmetic operators will recalculate and assign, whereas ++ or -- modifies
x directly before (++x) or after (x++) the expression is evaluated.

Order of operations:
multiplication and division have higher priority than + and -
in java 10 + 3 * 2 = 16
(10 + 3) * 2 = 26
()
*/
+-

CASTING:
// Implicit casting
short x = 1
int y = x + 2
=> y = 3
Because the short is smaller than the int, Java can make a copy of the short
and use it in the equation as an int. This happens automatically.
byte > short > int > long > float > double

// Explicit casting
double x = 1
int y = x + 2 - gives an error as x is a double and of greater memory than the int y

int y = (int)x + 2
=> 3 - here x is converted to an integer from a double

This can only happen between compatible types IE here all types are numbers
We can't cast a string to a number in this way
For primitive types, there are wrapper classes:

String x = "1";
int y = Integer.parseInt(x) + 2; //wrapper class for int primitive type - converts "1" to 1
System.out.println(y);
=> 3

THE MATH CLASS
EG:
int result Math.round(1.4F); returns an integer to nearest int
=>1

If the number is a double it will return a long
long result = Math.round(1.4444445D);
=>1

double result = Math.ceil(1.1F); - ceil returns a double of the next highest integer
System.out.println(result);
=> 2.0

Explicitly cast to make it an int if int is your variable type
   int result = (int)Math.ceil(1.1F);
   System.out.println(result);
=> 2

Math.floor is the same but returns a double the of the next lowest int

Math.max returns the greater of two numbers, min does the opposite
  int result = Math.max(1,2);
  => 2

Math.random() - returns a double between 0 - 1
 int result = (int)Math.round(Math.random() * 100);
 System.out.println(result);
 As Math.round with double returns a long, we have it explicilty
 cast it to a lower type if required, IE an int

FORMATTING NUMBERS
NumberFormat currency = new NumberFormat()
new NumberFormat() is an abstract class
You cannot create an instance of an abstract class


READING INPUT FROM THE USER
   Scanner scanner = new Scanner(System.in);
   System.out.print("Age: "); // print with no ln will not add a line so we can type on the same line as age:
   byte age = scanner.nextByte();
    System.out.println("you are " + age)
Use Scanner class to raed input from the terminal
.nextByte() only works for bytes, .nextDouble() etc for other prim types

        Scanner scanner = new Scanner(System.in);
        System.out.print("Name: ");
        String name = scanner.next();
        System.out.println("you are " + name);

Name: tom
scanner.next() gives a string
=> you are tom

Name: tom fyfe
=> you are tom
.next() returns 1 token, that token is the first string in the user input. Would have to call it twice
      Scanner scanner = new Scanner(System.in);
        System.out.print("Name: ");
        String name = scanner.next();
        String name2 = scanner.next();

        System.out.println("you are " + name);
        System.out.println("you are " + name2);
Name: tom fyfe
you are tom
you are fyfe

use .nextLine()
Name: tom fyfe
you are tom fyfe

chain on .trim() to remove any white space




NumberFormat has a number of factory methods beginning with 'get'
Use these to instantiate an abstract class
Called a factory method because it creates new objects

        NumberFormat currency = NumberFormat.getCurrencyInstance(); - currency is the new instantiated NumberFormat object
        String result = currency.format(123456.891);

        the format method with return a string representation of the number
        => $123,456.89

use getPercentInstance()
        NumberFormat percentage = NumberFormat.getPercentInstance();
        String result = percentage.format(0.1);
        System.out.println(result);
        => 10%
or
        String percentage = NumberFormat.getPercentInstance().format(0.1);

String arrays - all items get initialised to null
Boolean arrays - all items get initialised to false

New way of initialing an array: int[] numbers = {2,3,5,1,4};
=> [2, 3, 5, 1, 4]

Arrays have a fixed length, can after they are created we cannot add/remove additional items to them
(use a collection class)

Arrays have methods like sort:
  int[] numbers = {2,3,5,1,4};
        Arrays.sort(numbers);
        System.out.println(Arrays.toString(numbers))
        => [1, 2, 3, 4, 5]

int result = Math.round(1.5F); => rounds up
int result = (int)Math.ceil(1.5F);
int result = (int)Math.floor(1.2F);
        int result = Math.max(1, 3); => returns the greater number - min returns lowest
        int result = Math.random(); => float between 0 -1

int result = (int)Math.round(Math.random() * 100);
(implicit casting, round returns a long but as we know the result will only hold 4
bytes we can convert it to an Int)

formatting numbers:
        NumberFormat currency = NumberFormat.getCurrencyInstance();
        String result = currency.format(123456.7891);
        System.out.println(result); => Â£123,456.79

        String result = NumberFormat.getPercentInstance().format(0.1);
        System.out.println(result); => 10%

reading input
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("enter age: ");
        byte age = scanner.nextByte();
//
        System.out.println("you are " + age);
    }
    scanner.nextLine() to  get whole string entered
    use trim to get rid of scanner.nextLine()

