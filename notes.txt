import java.awt.*;
import java.util.Arrays;

byte > short > int > long > float > double


int result = Math.round(1.5F); => rounds up
int result = (int)Math.ceil(1.5F);
int result = (int)Math.floor(1.2F);
        int result = Math.max(1, 3); => returns the greater number - min returns lowest
        int result = Math.random(); => float between 0 -1

int result = (int)Math.round(Math.random() * 100);
(implicit casting, round returns a long but as we know the result will only hold 4
bytes we can convert it to an Int)

formatting numbers:
        NumberFormat currency = NumberFormat.getCurrencyInstance();
        String result = currency.format(123456.7891);
        System.out.println(result); => Â£123,456.79

        String result = NumberFormat.getPercentInstance().format(0.1);
        System.out.println(result); => 10%

reading input
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("enter age: ");
        byte age = scanner.nextByte();
//
        System.out.println("you are " + age);
    }
    scanner.nextLine() to  get whole string entered
    use trim to get rid of scanner.nextLine()

 PART2:
 COMPARISON OPERATORS:
if {}
else if
//code

keep statements in a vertical line
no need  for {} after else if and else

simplifying if statements:
        int income = 200_000;
        boolean hasHighIncome = false;
        if (income > 100_000)
            hasHighIncome = true;

instead write like:
        int income = 200_000;
       boolean hasHighIncome = (income > 100_000)
       /this returns a true or false - no need for the if statement

ternary operator:
        int income = 200_000;
        String className = income > 100_000 ? "First" : "Economy";

switch statements:
        String role = "admin";

        switch (role) {
            case "admin":
                System.out.println("you're an admin");
                break;

            case "moderator":
                System.out.println("you're a moderator");
                break;

            default:
                System.out.println("you're a guest");

fizzbuzz :
        Scanner scanner = new Scanner(System.in);
        System.out.print("Number: ");
        int num = scanner.nextInt();

        if (num % 5 == 0 && num % 3 == 0)
            System.out.println("fizzbuzz");
        else if (num % 5 == 0)
            System.out.println("fizz");
        else if (num % 3 == 0)
            System.out.println("buzz");
        else
            System.out.println(num);

LOOPS:
for loops:
          for (int i = 0; i < 5; i++)
          System.out.println("Hi Chants" + i);

while loops:
 1)       while (i > 0) {
            System.out.println("Hi Chants" + i);
            i--;
--------------------------------------------------
2)       Scanner scanner = new Scanner(System.in);
        String input = "";
        while (!input.equals("quit")){
            System.out.println("input: ");
            input = scanner.next().toLowerCase();
            }
        }
        use in situations when you don't know excactly how many times you want to repeat something

do while loops:
                do {
                    System.out.println("input: ");
                    input = scanner.next().toLowerCase();
                    System.out.println(input);
                } while (!input.equals("quit"));
        even if the condition is met the code block will be ran at least once

using continue and break:
 Scanner scanner = new Scanner(System.in);
        String input = "";
        while (true){

            System.out.println("input: ");
            input = scanner.next().toLowerCase();
            if (input.equals("pass"))
                continue;
                // continue goes straight back to the top of the loo.
            if (input.equals("quit"))
                break;
                // break terminates the loop
            System.out.println(input);
        }

 for each:
 iterating over arrays or collections

       / for loop
       for (int i = fruits.length; i > 0; i--)
           System.out.println(fruits[i]);

        / for each
       for (String fruit : fruits)
           System.out.println(fruit);

       with the for loop you can iterate in reverse,
       also you can find items but index ir fruits[i]

 tester