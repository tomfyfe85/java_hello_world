Classes and Objects:

A classes is a blueprint or a template for creating objects.

eg:
CAR object
fields - started, current speed, currentGear
methods - Start/Stop/Brake/changeGear

EG when we call changeGear, the value of current gear changes

Creating Classes:

Public - Class is visible to all other classes in the package
use Pascal to name the Class
use camel to name the fields

When the name of a parameter is the same as the field name,
use this. "field name"

the field's state is changed by the methods


    public static void main(String[] args) {
        var textBox1 = new TextBox();
    }
var - Java complier will detect the type of this variable
based on what we have on the right hand side of the =
Not like in JavaScript

Memory allocation:
HEAP - where objects are stored
STACK - primitives and short-lived variables

var textBox1 = new TextBox();
Here Java first allocated memory new TextBox() on the heap
Then is stores a reference to it - textBox1 on the Stack

Encapsulation:
Bundle the data, and methods that operate on the data in a
single unit.

public class Employee {
    public int baseSalary;
    public int hourlyRate;
    public int extraHours;

    public int calculateWage(){
        return baseSalary+ (extraHours * hourlyRate);
    }

No need to pass in value as paramemters in calculateWage.
Instead of passing values around, they should be encapsulated
along with the methods that operate on them, in a single object.

