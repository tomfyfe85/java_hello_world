import java.awt.*;
import java.util.Arrays;

a method is a function inside a class
classes - Pascal naming
methods - camel naming

main method in project should always be static
void - method will not return a value

always surround textual data with double quotes

primitive types - 8 primitive types

byte > short > int > long > float > double
-byte can store values up to 127
- short up to 32k
- int up to 2B

long viewCount = 3_123_456_789L;
use L at the end of the number as java compiler assumes large numbers to be int, although they are typed differently
Same with doubles and floats. Java compiler sees float 2.99 as a double. - float 2.99F;

char letter = 'A' - single characters with '', strings with ""

Reference types are copied by their references and primitive are copied by their value
IE if you make a new instance of a class and assign it a variable (A) and you assign another variable (B)
to the initial variable (A), both variables will point to the same area of memory. So if you change a property B,
it will be represented in the output with you print A.

Strings:
Reference type that doesn't need the "new" keyword as it is used so often.
built in methods include:
.length()
.startsWith()
.indexOf()
.replace()
.toLowerCase()
.trim() - gets rid of white at the front and  back of the string
In java strings are immutable, we cannot change them. Any string method will return a new string
object.

Escape sequences:
To use "" inside a string, use backslashes. IE "Hello \"Tom\"";
To use backslashes inside a string use two - "c:\\Windows\\..." => "c:\Windows\..."
Use \n to add a new line to the string - "c:\nWindows\\..." =>
"c:
Windows\..."
Use \t to add a tab in the string

Arrays
example - initialise an array. IE What is in the array int[] numbers = new int[5]
This initialises an empty array which can hold up to 5 integers,
numbers[0] = 1;
numbers[1] = 2;
=> [1,2,0,0,0]
unused positions have a default value of 0

String arrays - all items get initialised to and empty string
Booloan arrays - all items get initialised to False

New way of initialsing an array: int[] numbers = {2,3,5,1,4};
=> [2, 3, 5, 1, 4]

Arrays have a fixed length, can after they are created we cannot add/remove additional items to them
(use a collection class)

Arrays have methods like sort:
  int[] numbers = {2,3,5,1,4};
        Arrays.sort(numbers);
        System.out.println(Arrays.toString(numbers))
        => [1, 2, 3, 4, 5]

int result = Math.round(1.5F); => rounds up
int result = (int)Math.ceil(1.5F);
int result = (int)Math.floor(1.2F);
        int result = Math.max(1, 3); => returns the greater number - min returns lowest
        int result = Math.random(); => float between 0 -1

int result = (int)Math.round(Math.random() * 100);
(implicit casting, round returns a long but as we know the result will only hold 4
bytes we can convert it to an Int)

formatting numbers:
        NumberFormat currency = NumberFormat.getCurrencyInstance();
        String result = currency.format(123456.7891);
        System.out.println(result); => Â£123,456.79

        String result = NumberFormat.getPercentInstance().format(0.1);
        System.out.println(result); => 10%

reading input
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("enter age: ");
        byte age = scanner.nextByte();
//
        System.out.println("you are " + age);
    }
    scanner.nextLine() to  get whole string entered
    use trim to get rid of scanner.nextLine()

 PART2:
 COMPARISON OPERATORS:
if {}
else if
//code

keep statements in a vertical line
no need  for {} after else if and else

simplifying if statements:
        int income = 200_000;
        boolean hasHighIncome = false;
        if (income > 100_000)
            hasHighIncome = true;

instead write like:
        int income = 200_000;
       boolean hasHighIncome = (income > 100_000)
       /this returns a true or false - no need for the if statement

ternary operator:
        int income = 200_000;
        String className = income > 100_000 ? "First" : "Economy";

switch statements:
        String role = "admin";

        switch (role) {
            case "admin":
                System.out.println("you're an admin");
                break;

            case "moderator":
                System.out.println("you're a moderator");
                break;

            default:
                System.out.println("you're a guest");

fizzbuzz :
        Scanner scanner = new Scanner(System.in);
        System.out.print("Number: ");
        int num = scanner.nextInt();

        if (num % 5 == 0 && num % 3 == 0)
            System.out.println("fizzbuzz");
        else if (num % 5 == 0)
            System.out.println("fizz");
        else if (num % 3 == 0)
            System.out.println("buzz");
        else
            System.out.println(num);

LOOPS:
for loops:
          for (int i = 0; i < 5; i++)
          System.out.println("Hi Chants" + i);

while loops:
 1)       while (i > 0) {
            System.out.println("Hi Chants" + i);
            i--;
--------------------------------------------------
2)       Scanner scanner = new Scanner(System.in);
        String input = "";
        while (!input.equals("quit")){
            System.out.println("input: ");
            input = scanner.next().toLowerCase();
            }
        }
        use in situations when you don't know exactly how many times you want to repeat something

do while loops:
                do {
                    System.out.println("input: ");
                    input = scanner.next().toLowerCase();
                    System.out.println(input);
                } while (!input.equals("quit"));
        even if the condition is met the code block will run at least once

using continue and break:
 Scanner scanner = new Scanner(System.in);
        String input = "";
        while (true){

            System.out.println("input: ");
            input = scanner.next().toLowerCase();
            if (input.equals("pass"))
                continue;
                // continue goes straight back to the top of the loo.
            if (input.equals("quit"))
                break;
                // break terminates the loop
            System.out.println(input);
        }

 for each:
 iterating over arrays or collections

       / for loop
       for (int i = fruits.length; i > 0; i--)
           System.out.println(fruits[i]);

        / for each
       for (String fruit : fruits)
           System.out.println(fruit);

       with the for loop you can iterate in reverse,
       also you can find items but index ir fruits[i]

 tester