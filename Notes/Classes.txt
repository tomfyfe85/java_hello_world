Classes and Objects:

A classes is a blueprint or a template for creating objects.

eg:
CAR object
fields - started, current speed, currentGear
methods - Start/Stop/Brake/changeGear

EG when we call changeGear, the value of current gear changes

Creating Classes:

Public - Class is visible to all other classes in the package
use Pascal to name the Class
use camel to name the fields

When the name of a parameter is the same as the field name,
use this. "field name"

the field's state is changed by the methods


    public static void main(String[] args) {
        var textBox1 = new TextBox();
    }
var - Java complier will detect the type of this variable
based on what we have on the right hand side of the =
Not like in JavaScript

Memory allocation:
HEAP - where objects are stored
STACK - primitives and short-lived variables

var textBox1 = new TextBox();
Here Java first allocated memory new TextBox() on the heap
Then is stores a reference to it - textBox1 on the Stack

Encapsulation:
Bundle the data, and methods that operate on the data in a
single unit.

public class Employee {
    public int baseSalary;
    public int hourlyRate;
    public int extraHours;

    public int calculateWage(){
        return baseSalary+ (extraHours * hourlyRate);
    }

No need to pass in value as parameters in calculateWage.
Instead of passing values around, they should be encapsulated
along with the methods that operate on them, in a single object.

Encapsulating data validation

    public void setBaseSalary(int baseSalary){
        if (baseSalary <= 0)
            throw new IllegalArgumentException("Salary cannot be 0 or less");
        this.baseSalary = baseSalary;}
        }
In Java, make fields private and use getters and setters to work with them.

Getters and Setters:
by making fields private, we prevent direct modification from the outside class.
Use a set method to validate the data and a get to return it in the main class.

ABSTRACTION:
Reduce complexity by hiding unnecessary details.
Hide implementation detail. Like circuitry in a tv remote. We see the buttons,
everything else this hidden in the remote, and the user doesn't really care how
it works.

COUPLING:
The level of dependency between classes. We want to reduce this.
Make methods not used in main private, this reduces the coupling between the
two classes.


Reducing Coupling:
Trying to keep all methods used internally in a class private. These unnecessary
methods pollute the class methods in available in the main class

Constructors:
Use constructors to set data from the initialisation of the object.
This abstracts the methods and decouples the class further from main.
IE
public class Employee {
    private int baseSalary;
    private int hourlyRate;

    public Employee(int baseSalary, int hourlyRate){
        setBaseSalary(baseSalary);
        setHourlyRate(hourlyRate);
    }

Static fields and methods:
Use static fields in situations where the value is independant of any instance
methods/objects. IE number of employees in the firm.